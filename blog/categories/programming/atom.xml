<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | davidcel.is]]></title>
  <link href="http://davidcelis.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://davidcelis.github.io/"/>
  <updated>2013-04-26T16:57:14-07:00</updated>
  <id>http://davidcelis.github.io/</id>
  <author>
    <name><![CDATA[David Celis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Stop Validating Email Addresses With Your Complex Regex]]></title>
    <link href="http://davidcelis.github.io/blog/2012/09/06/stop-validating-email-addresses-with-regex/"/>
    <updated>2012-09-06T10:33:00-07:00</updated>
    <id>http://davidcelis.github.io/blog/2012/09/06/stop-validating-email-addresses-with-regex</id>
    <content type="html"><![CDATA[<p>Just stop, guys. It's a waste of your time and your effort. Put down your Google search for an <a href="http://www.google.com/search?q=email+regex">email regular expression</a>, take a step back, and breathe. There's a famous quote that goes:</p>

<p><blockquote><p>Some people, when confronted with a problem, think, "I know, I'll use regular expressions."<br/>Now they have two problems.</p><footer><strong>Jamie Zawinski,</strong> <cite><a href='http://regex.info/blog/2006-09-15/247'>regex.info/blog/2006-09-15/247/&hellip;</a></cite></footer></blockquote></p>

<p>Here's a fairly common code sample from Rails Applications with some sort of authentication system:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="c1"># This regex is from https://github.com/plataformatec/devise, the most</span>
</span><span class='line'>  <span class="c1"># popular Rails authentication library</span>
</span><span class='line'>  <span class="n">validates_format_of</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="sr">/\A[&lt;sup&gt;@]+@([&lt;sup&gt;@.]+.)+[&lt;sup&gt;@.]+\z/</span><span class="o">&lt;</span><span class="sr">/sup&gt;&lt;/su</span><span class="nb">p</span><span class="o">&gt;&lt;</span><span class="sr">/sup&gt;</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This seems fairly simple (unless you don't know Regex), but it can get way worse...</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">validates_format_of</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="sr">/&lt;sup&gt;(|(([A-Za-z0-9]+_+)|([A-Za-z0-9]+-+)|([A-Za-z0-9]+.+)|([A-Za-z0-9]+++))&lt;em&gt;[A-Za-z0-9]+@((\w+-+)|(\w+.))&lt;/em</span><span class="o">&gt;</span><span class="p">\</span><span class="n">w</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">63</span><span class="p">}</span><span class="o">.</span><span class="n">[a</span><span class="o">-</span><span class="n">zA</span><span class="o">-</span><span class="n">Z</span><span class="o">]</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">6</span><span class="p">})</span><span class="vg">$/</span><span class="n">i</span><span class="o">&lt;</span><span class="sr">/sup&gt;</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Or even worse still...</p>

<!--more-->


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="no">EmailAddressValidator</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class EmailValidator &amp;lt; ActiveModel::Validator</span>
</span><span class='line'><span class="sr">  EMAIL_ADDRESS_QTEXT           = Regexp.new &#39;[&lt;sup&gt;\x0d\x22\x5c\x80-\xff]&#39;,&lt;/su</span><span class="nb">p</span><span class="o">&gt;</span> <span class="kp">nil</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span>
</span><span class='line'>  <span class="no">EMAIL_ADDRESS_DTEXT</span>           <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span> <span class="s1">&#39;[&lt;sup&gt;\x0d\x5b-\x5d\x80-\xff]&#39;</span><span class="p">,</span><span class="o">&lt;</span><span class="sr">/sup&gt; nil, &#39;n&#39;</span>
</span><span class='line'><span class="sr">  EMAIL_ADDRESS_ATOM            = Regexp.new &#39;[&lt;sup&gt;\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+&#39;,&lt;/su</span><span class="nb">p</span><span class="o">&gt;</span> <span class="kp">nil</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span>
</span><span class='line'>  <span class="no">EMAIL_ADDRESS_QUOTED_PAIR</span>     <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span> <span class="s1">&#39;\x5c[\x00-\x7f]&#39;</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span>
</span><span class='line'>  <span class="no">EMAIL_ADDRESS_DOMAIN_LITERAL</span>  <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;</span><span class="se">\x5b</span><span class="s2">(?:</span><span class="si">#{</span><span class="no">EMAIL_ADDRESS_DTEXT</span><span class="si">}</span><span class="s2">|</span><span class="si">#{</span><span class="no">EMAIL_ADDRESS_QUOTED_PAIR</span><span class="si">}</span><span class="s2">)&lt;em&gt;</span><span class="se">\x5d</span><span class="s2">&quot;</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span>
</span><span class='line'>  <span class="no">EMAIL_ADDRESS_QUOTED_STRING</span>   <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;</span><span class="se">\x22</span><span class="s2">(?:</span><span class="si">#{</span><span class="no">EMAIL_ADDRESS_QTEXT</span><span class="si">}</span><span class="s2">|</span><span class="si">#{</span><span class="no">EMAIL_ADDRESS_QUOTED_PAIR</span><span class="si">}</span><span class="s2">)&lt;/em&gt;</span><span class="se">\x22</span><span class="s2">&quot;</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span>
</span><span class='line'>  <span class="no">EMAIL_ADDRESS_DOMAIN_REF</span>      <span class="o">=</span> <span class="no">EMAIL_ADDRESS_ATOM</span>
</span><span class='line'>  <span class="no">EMAIL_ADDRESS_SUB_DOMAIN</span>      <span class="o">=</span> <span class="s2">&quot;(?:</span><span class="si">#{</span><span class="no">EMAIL_ADDRESS_DOMAIN_REF</span><span class="si">}</span><span class="s2">|</span><span class="si">#{</span><span class="no">EMAIL_ADDRESS_DOMAIN_LITERAL</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>  <span class="no">EMAIL_ADDRESS_WORD</span>            <span class="o">=</span> <span class="s2">&quot;(?:</span><span class="si">#{</span><span class="no">EMAIL_ADDRESS_ATOM</span><span class="si">}</span><span class="s2">|</span><span class="si">#{</span><span class="no">EMAIL_ADDRESS_QUOTED_STRING</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>  <span class="no">EMAIL_ADDRESS_DOMAIN</span>          <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">EMAIL_ADDRESS_SUB_DOMAIN</span><span class="si">}</span><span class="s2">(?:</span><span class="se">\x2e</span><span class="si">#{</span><span class="no">EMAIL_ADDRESS_SUB_DOMAIN</span><span class="si">}</span><span class="s2">)&lt;em&gt;&quot;</span>
</span><span class='line'>  <span class="no">EMAIL_ADDRESS_LOCAL_PART</span>      <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">EMAIL_ADDRESS_WORD</span><span class="si">}</span><span class="s2">(?:</span><span class="se">\x2e</span><span class="si">#{</span><span class="no">EMAIL_ADDRESS_WORD</span><span class="si">}</span><span class="s2">)&lt;/em&gt;&quot;</span>
</span><span class='line'>  <span class="no">EMAIL_ADDRESS_SPEC</span>            <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">EMAIL_ADDRESS_LOCAL_PART</span><span class="si">}</span><span class="se">\x40</span><span class="si">#{</span><span class="no">EMAIL_ADDRESS_DOMAIN</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="no">EMAIL_ADDRESS_PATTERN</span>         <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">EMAIL_ADDRESS_SPEC</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span>
</span><span class='line'>  <span class="no">EMAIL_ADDRESS_EXACT_PATTERN</span>   <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;\A</span><span class="si">#{</span><span class="no">EMAIL_ADDRESS_SPEC</span><span class="si">}</span><span class="s2">\z&quot;</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def validate(record)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">unless</span> <span class="n">record</span><span class="o">.</span><span class="n">email</span> <span class="o">=~</span> <span class="no">EMAIL_ADDRESS_EXACT_PATTERN</span>
</span><span class='line'>  <span class="n">record</span><span class="o">.</span><span class="n">errors</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s1">&#39;is invalid&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Yeesh. Is something that complex really necessary? If you actually check the Google query I linked above, people have been writing (or trying to write) <a href="http://tools.ietf.org/html/rfc2822">RFC-compliant</a> regular expressions to parse email addresses for years. They can get ridiculously convoluted as in the case above and, according to the specification, are often too strict anyway.</p>

<p>Sections <a href="http://tools.ietf.org/html/rfc2822#section-3.2.4">3.2.4</a> and <a href="http://tools.ietf.org/html/rfc2822#section-3.4.1">3.4.1</a> of the RFC go into the requirements on how an email address needs to be formatted and, well, there's not much you can't do in your email address when quotes or backslashes are involved. The local string (the part of the email address that comes before the @) can contain the following characters:</p>

<p><code>! $ &amp; * - = ^ ` | ~ # % ' + / ? _ { }</code></p>

<p>But guess what? You can use pretty much any character you want if you escape it by surrounding it in quotes. For example, <code>"Look at all these spaces!"@example.com</code> is a valid email address. Nice.</p>

<p>For this reason, for a time I began running any email address against the following regular expression instead:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">validates_format_of</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="sr">/@/</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Simple, right? Email addresses have to have an @ symbol. This is often the most I do and, when paired with a confirmation field for the email address on your registration form, can alleviate most problems with user error. But what if I told you there were a way to determine whether or not an email is valid without resorting to regular expressions at all? It's surprisingly easy, and you're probably already doing it anyway.</p>

<h2>Just send them an email already</h2>

<p>No, I'm not joking. Just send your users an email. The activation email is a practice that's been in use for years, but it's often paired with complex validations that the email is formatted correctly. If you're going to send an activation email to users, why bother using a gigantic regular expression?</p>

<p>Think about it this way: I register for your website under the email address <code>qwiufaisjdbvaadsjghb@gmail.com</code>. C'mon. That shit's probably going to bounce off of the illustrious mail daemon, but the formatting is fine; it's a valid email address. To fix this problem, you implement an activation system where, after registering, I am sent an email with a link I must click. This is to verify that I actually own that email address before my account is activated. At this point, why keep parsing email addresses for their format? The result of sending an email to a badly formatted email address would be the same: it'll get bounced. If your user enters a bad email address, they won't get the activation email and they'll try to register again if they really care about using your site. It's that simple.</p>

<p>So eschew your fancy regular expressions already. If you really want to do  checking of email addresses right on the signup page, include a confirmation field so they have to type it twice. Enterprising individuals will just copy and paste, but what it comes down to is this: if your user enters a bad email address, you shouldn't make it more of a problem for yourself than you have to. A complex regex validation on the email address doesn't introduce an additional solution, it introduces an additional problem. If you really, really want to make sure people are typing in an actual email address, just use the <code>/@/</code> regular expression and call it done. Feeling ambitious? Then check for the dot too: <code>/.+@.+\..+/i</code>. Anything more is overkill.</p>

<p><em>UPDATE: As several users in the comments have also pointed out, many email address regexes on the web will show tagged emails (i.e. <code>email+tag@example.com</code>) as invalid. Lots of people use tags in their email addresses while registering as a pair with their email service's filtering systems. Keep that in mind if you don't wish to heed the above advice.</em></p>

<p><em>Additionally, you should take commenter Travis Dahlke's <a href="http://davidcel.is/blog/2012/09/06/stop-validating-email-addresses-with-regex/#comment-642429611">suggestion</a> and look at <a href="https://github.com/Kicksend/mailcheck">Kicksend's mail checker</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Edge Rails 4.0: A Multilingual Inflector]]></title>
    <link href="http://davidcelis.github.io/blog/2012/07/31/edge-rails-a-multilingual-inflector/"/>
    <updated>2012-07-31T09:50:00-07:00</updated>
    <id>http://davidcelis.github.io/blog/2012/07/31/edge-rails-a-multilingual-inflector</id>
    <content type="html"><![CDATA[<p>Here's a sneak peak at an upcoming enhancement for <code>ActiveSupport::Inflector</code> in Rails 4.0. The Inflector is the part of Rails responsible for a good amount of the cool stuff you can do with Strings: pluralization, singularization, titleization, humanization, tableization... The list goes on. Rails uses these methods extensively to map between, say, Model names, Controller names, and the Model's table name.</p>

<p>Currently, the Inflector can handle only one set of rules at a time. Rails provides a lengthy list of singularization and pluralization rules for English, but what if somebody wants to specify how certain words in a foreign language (say Spanish) should be pluralized? In Rails 3, they have two options: they can define the words as irregularities in <code>config/initializers/inflections.rb</code> or put them into locale files. The former is bad because it involves mixing two languages into one set of rules, and the latter can lead to large, cluttered locale files when internationalizing a website. In Rails 4, however, I'm happy to offer a better solution for Rails developers in the process of internationalization: the Inflector is now multilingual. It can manage a complete set of inflection rules for each locale!</p>

<!--more-->


<p>Rails will still only provide a list of inflections in English. However, it's now much easier to specify your own set of rules (or have them provided to you via a gem) for additional locales. You can, as previously, specify these rules in <code>config/initializers/inflections.rb</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config/initializers/inflections.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Inflector#inflections now takes a locale as a parameter (defaults to :en)&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Inflector</span><span class="o">.</span><span class="n">inflections</span><span class="p">(</span><span class="ss">:es</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">inflect</span><span class="o">|</span>
</span><span class='line'>  <span class="n">inflect</span><span class="o">.</span><span class="n">plural</span><span class="p">(</span><span class="sr">/$/</span><span class="p">,</span> <span class="s1">&#39;s&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">inflect</span><span class="o">.</span><span class="n">plural</span><span class="p">(</span><span class="sr">/([&lt;sup&gt;aeéiou])$/i</span><span class="p">,</span><span class="o">&lt;</span><span class="sr">/sup&gt; &#39;\1es&#39;)</span>
</span><span class='line'><span class="sr">  inflect.plural(/</span><span class="p">(</span><span class="o">[</span><span class="n">aeiou</span><span class="o">]</span><span class="n">s</span><span class="p">)</span><span class="vg">$/</span><span class="n">i</span><span class="p">,</span> <span class="s1">&#39;\1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">inflect</span><span class="o">.</span><span class="n">plural</span><span class="p">(</span><span class="sr">/z$/i</span><span class="p">,</span> <span class="s1">&#39;ces&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">inflect</span><span class="o">.</span><span class="n">plural</span><span class="p">(</span><span class="sr">/á([sn])$/i</span><span class="p">,</span> <span class="s1">&#39;a\1es&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">inflect</span><span class="o">.</span><span class="n">plural</span><span class="p">(</span><span class="sr">/é([sn])$/i</span><span class="p">,</span> <span class="s1">&#39;e\1es&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">inflect</span><span class="o">.</span><span class="n">plural</span><span class="p">(</span><span class="sr">/í([sn])$/i</span><span class="p">,</span> <span class="s1">&#39;i\1es&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">inflect</span><span class="o">.</span><span class="n">plural</span><span class="p">(</span><span class="sr">/ó([sn])$/i</span><span class="p">,</span> <span class="s1">&#39;o\1es&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">inflect</span><span class="o">.</span><span class="n">plural</span><span class="p">(</span><span class="sr">/ú([sn])$/i</span><span class="p">,</span> <span class="s1">&#39;u\1es&#39;</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  inflect.singular(/s</span><span class="vg">$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">inflect</span><span class="o">.</span><span class="n">singular</span><span class="p">(</span><span class="sr">/es$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  inflect.irregular(&#39;el&#39;, &#39;los&#39;)</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After specifying our ruleset for Spanish, we can fire up a Rails console and see it in action:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rails</span> <span class="n">c</span>
</span><span class='line'><span class="no">Loading</span> <span class="n">development</span> <span class="n">environment</span> <span class="p">(</span><span class="no">Rails</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="n">beta</span><span class="p">)</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="s2">&quot;avión&quot;</span><span class="o">.</span><span class="n">pluralize</span><span class="p">(</span><span class="ss">:es</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;aviones&quot;</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="s2">&quot;avión&quot;</span><span class="o">.</span><span class="n">pluralize</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;avións&quot;</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="s2">&quot;luz&quot;</span><span class="o">.</span><span class="n">pluralize</span><span class="p">(</span><span class="ss">:es</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;luces&quot;</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="s2">&quot;luz&quot;</span><span class="o">.</span><span class="n">pluralize</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;luzs&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The Inflector will still default to English and use <code>:en</code> as the locale unless specified, as opposed to using the application's <code>I18n.default_locale</code>. This is to avoid breaking applications that have been wired internally to use English pluralization rules for mapping between Model, Controller, and table names.</p>

<p>Go ahead and browse the <a href="https://github.com/rails/rails/commit/7db0b073fec6bc3e6f213b58c76e7f43fcc2ab97">commit on GitHub</a>.</p>

<h3>Where can I get rules for other locales?</h3>

<p>I'm proud to offer a solution for this too! I've created a gem called <a href="https://github.com/davidcelis/inflections">Inflections</a> that I'm hoping can serve as a central repository for inflection rules of all locales. Unfortunately, I'm not a master of linguistics. Aside from English, I am only comfortable with Spanish, and so that's the only additional set of inflection rules I have provided thus far (aside from a shorter list of English inflections that I believe to be stripped to the essentials). If you or anybody you know are a Rails developer and fluent in another language, please consider <a href="https://github.com/davidcelis/inflections/fork_select">forking Inflections</a>, making a list of inflections (<code>lib/inflections/&lt;locale&gt;.rb</code>) with tests (<code>test/&lt;locale&gt;_test.rb</code>) and <a href="https://github.com/davidcelis/inflections/pull/new/master">opening a pull request</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Current State of Rails Inflections]]></title>
    <link href="http://davidcelis.github.io/blog/2012/07/18/the-current-state-of-rails-inflections/"/>
    <updated>2012-07-18T16:30:00-07:00</updated>
    <id>http://davidcelis.github.io/blog/2012/07/18/the-current-state-of-rails-inflections</id>
    <content type="html"><![CDATA[<p><em>UPDATE: I've provided a better set of inflections in the form of a gem. If you agree with my sentiment here, check it out at the end of this post.</em></p>

<p>Ah, the Rails Inflector; we all know and love it. This little part of ActiveSupport has a lot of responsibility in our Rails applications, after all. It affects table names, class names, our resourceful routes, foreign keys... It's a great part of ActiveSupport. Not only does much of Rails depend on the Inflector, but it provides useful mechanisms for string manipulation to users.</p>

<p>But how does the Inflector actually handle singularization and pluralization? English is not a regular language. There are a lot of grammatical rules to consider when converting between the two, so what does the Inflector consider? There must be some magic involved, right? According to the documentation, Rails defines these inflections directly in ActiveSupport... <code>lib/active_support/inflections.rb</code> to be exact. Let's take a looksy, shall we?</p>

<!--more-->


<p><div><script src='https://gist.github.com/3137677.js?file=inflections.rb'></script>
<noscript><pre><code>require 'active_support/inflector/inflections'

module ActiveSupport
  Inflector.inflections do |inflect|
    inflect.plural(/$/, 's')
    inflect.plural(/s$/i, 's')
    inflect.plural(/^(ax|test)is$/i, '\1es')
    inflect.plural(/(octop|vir)us$/i, '\1i')
    inflect.plural(/(octop|vir)i$/i, '\1i')
    inflect.plural(/(alias|status)$/i, '\1es')
    inflect.plural(/(bu)s$/i, '\1ses')
    inflect.plural(/(buffal|tomat)o$/i, '\1oes')
    inflect.plural(/([ti])um$/i, '\1a')
    inflect.plural(/([ti])a$/i, '\1a')
    inflect.plural(/sis$/i, 'ses')
    inflect.plural(/(?:([^f])fe|([lr])f)$/i, '\1\2ves')
    inflect.plural(/(hive)$/i, '\1s')
    inflect.plural(/([^aeiouy]|qu)y$/i, '\1ies')
    inflect.plural(/(x|ch|ss|sh)$/i, '\1es')
    inflect.plural(/(matr|vert|ind)(?:ix|ex)$/i, '\1ices')
    inflect.plural(/^(m|l)ouse$/i, '\1ice')
    inflect.plural(/^(m|l)ice$/i, '\1ice')
    inflect.plural(/^(ox)$/i, '\1en')
    inflect.plural(/^(oxen)$/i, '\1')
    inflect.plural(/(quiz)$/i, '\1zes')

    inflect.singular(/s$/i, '')
    inflect.singular(/(ss)$/i, '\1')
    inflect.singular(/(n)ews$/i, '\1ews')
    inflect.singular(/([ti])a$/i, '\1um')
    inflect.singular(/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, '\1sis')
    inflect.singular(/(^analy)(sis|ses)$/i, '\1sis')
    inflect.singular(/([^f])ves$/i, '\1fe')
    inflect.singular(/(hive)s$/i, '\1')
    inflect.singular(/(tive)s$/i, '\1')
    inflect.singular(/([lr])ves$/i, '\1f')
    inflect.singular(/([^aeiouy]|qu)ies$/i, '\1y')
    inflect.singular(/(s)eries$/i, '\1eries')
    inflect.singular(/(m)ovies$/i, '\1ovie')
    inflect.singular(/(x|ch|ss|sh)es$/i, '\1')
    inflect.singular(/^(m|l)ice$/i, '\1ouse')
    inflect.singular(/(bus)(es)?$/i, '\1')
    inflect.singular(/(o)es$/i, '\1')
    inflect.singular(/(shoe)s$/i, '\1')
    inflect.singular(/(cris|test)(is|es)$/i, '\1is')
    inflect.singular(/^(a)x[ie]s$/i, '\1xis')
    inflect.singular(/(octop|vir)(us|i)$/i, '\1us')
    inflect.singular(/(alias|status)(es)?$/i, '\1')
    inflect.singular(/^(ox)en/i, '\1')
    inflect.singular(/(vert|ind)ices$/i, '\1ex')
    inflect.singular(/(matr)ices$/i, '\1ix')
    inflect.singular(/(quiz)zes$/i, '\1')
    inflect.singular(/(database)s$/i, '\1')

    inflect.irregular('person', 'people')
    inflect.irregular('man', 'men')
    inflect.irregular('child', 'children')
    inflect.irregular('sex', 'sexes')
    inflect.irregular('move', 'moves')
    inflect.irregular('cow', 'kine')
    inflect.irregular('zombie', 'zombies')

    inflect.uncountable(%w(equipment information rice money species series fish sheep jeans police))
  end
end</code></pre></noscript></div>
</p>

<p>This is a snapshot of Rails' inflections in the master branch (4.0.0.beta) at the time of writing this post and... Well... Yikes. This brings me to what I really want to discuss: the state of Rails' Singularization and Pluralization rules. I think it's a mess.</p>

<h2>Pluralization in English is not regular</h2>

<p>There are only a few basic rules in English for pluralization. Because we're speaking in terms of text, I'll try to keep these rules based on characters rather than sounds. However, one important rule does depend on "<a href="http://en.wikipedia.org/wiki/Sibilant">sibilant</a>" sounds, which are defined as a sound made by directing air through the sharp edge of your teeth and your tongue (i.e. 'sh', 'ss', 'dge', etc.). While prevalent, this can be difficult to detect in text and there are definitely edge cases.</p>

<h3>The rules</h3>

<ul>
<li><p>If the word ends with a "sibilant" sound, the plural form ends with 'es' (dish => dishes, ) or 's' if the word already ends with an 'e' (such as fridge => fridges or judge => judges)</p></li>
<li><p>Most words that end with an 'o' preceded by a consonant pluralize as 'oes' (potato => potatoes, avocado => avocadoes).</p></li>
<li><p>Most words that end with a 'y' preceded by a consonant pluralize as 'ies' (lady => ladies, berry => berries)</p></li>
</ul>


<p>Aside from these rules, however, all other regular plurals are achieved by adding an 's'.</p>

<h3>Some exceptions</h3>

<ul>
<li>Words of foreign origin are exempt from the 'oes' rule (piano => pianos, zero => zeros, kimono => kimonos).</li>
<li>Proper nouns that end with a y are exempt from the 'ies' rule (Germany => Germanys, Cody => Codys).</li>
</ul>


<p>These are just two sets of exceptions, however, and these are moreso rules that are exceptions to other rules. English pluralization is riddled with other exceptions that are inconsistent:</p>

<ul>
<li>Some words that end in an 'f' have that 'f' mutated to a 'v' during pluralization (calf => calves, shelf => shelves, leaf => leaves) due in part to the evolution of old/middle English to standard English.</li>
<li>Some words with double 'o's replace those 'o's with 'e's (goose => geese, foot => feet).</li>
<li>Many words are both singular and plural (buffalo, money, sheep, series, fish, coffee) and are therefore uncountable.</li>
<li>Some words can even be pluralized <em>multiple ways</em> depending on context (indices/indexes, staffs/staves)! That's a case that the Rails Inflector can never hope to get right.</li>
<li>And, of course, some words are just plain irregular (child => children, man => men, mouse => mice, datum => data, etc.).</li>
</ul>


<p>How can Rails hope to consider all of these exceptions when English is such an irregular and fluid language? How should Rails handle the edge cases and irregularities? The answer is simple: it shouldn't.</p>

<h2>The inflector should be based on rules, not exceptions</h2>

<p>The current inflections that Rails defines are riddled with both rules and exceptions. The file has become such a mess, and so many people were submitting pull requests (<a href="https://github.com/rails/rails/pull/7086">#7086</a> <a href="https://github.com/rails/rails/pull/345">#345</a> <a href="https://github.com/rails/rails/pull/3930">#3930</a> <a href="https://github.com/rails/rails/pull/3910">#3910</a> <a href="https://github.com/rails/rails/pull/6820">#6820</a> <a href="https://github.com/rails/rails/pull/2457">#2457</a> and the list goes on and on and on...) to either fix inflections or add new ones, that inflections in Rails are now frozen. From the documentation for <code>ActiveSupport::Inflector</code>:</p>

<p><blockquote><p>The Rails core team has stated patches for the inflections library will not be accepted in order to avoid breaking legacy applications which may be relying on errant inflections. If you discover an incorrect inflection and require it for your application, you'll need to correct it yourself.</p></blockquote></p>

<p>I believe that the Rails core team members have shot themselves in the feet with this one. Don't get me wrong, many of these pull requests <em>should</em> be closed. A common response to these patches is "Rails cannot possibly include all inflections by default." Awesome. I totally agree. But this is hypocritical, considering Rails has already defined many inflections that are exceptions or irregularities, such as ox => oxen, crisis => crises, and the aforementioned case of index => indices (even though this pluralization is purely contextual). Many of the "rules" defined in Rails' inflections are really exceptions. Some of these exceptions are narrow and affect only one or two words. Some of the exceptions admittedly make sense, but should instead be defined as irregularities rather than singular/plural inflections. I'll gloss over why some of the current inflections <em>don't</em> make sense:</p>

<ul>
<li><code>axis/testis &lt;=&gt; axes/testes</code>: special rules that should be defined as irregularities</li>
<li><code>octopus/virus &lt;=&gt; octopi/viri</code>: special rules which are actually disputed, as octopuses and viruses are more used and accepted</li>
<li><code>octopi/viri =&gt; octopi/viri</code>: these words are not singular, so pluralization should not even be attempted.</li>
<li><code>alias/status &lt;=&gt; aliases/statuses</code>: special rules even though this follows a regular pluralization rule</li>
<li><code>buffalo/tomato =&gt; buffaloes/tomatoes</code>: special rules even though these are also regular plurals</li>
<li><code>*hive &lt;=&gt; *hives</code>: a special rule even though this is a regular plural</li>
<li><code>matrix/vertex/index &lt;=&gt; matrices/vertices/indices</code>: while this makes sense, indices/indexes are both accepted depending on context. Matrices/Vertices are probably not used enough in Rails applications to warrant a provided rule.</li>
<li><code>mouse/louse &lt;=&gt; mice/lice</code>: words that will never see the light of day in Rails applications.</li>
<li><code>news &lt;=&gt; news</code>: A special rule that could have been an <code>uncountable</code>. The frequency of the word "news" in Rails applications is also debatable.</li>
<li><code>ox &lt;=&gt; oxen</code>: A special rule that should be an irregularity, but will also likely never be used in Rails applications</li>
<li><code>oxen =&gt; oxen</code>: A special rule even though oxen is not singular</li>
<li><code>quiz &lt;=&gt; quizzes</code>: A special rule that should be defined as an irregularity, though I feel similarly towards this irregularity as I do matrices/vertices.</li>
</ul>


<p>Clearly, something is amiss here. Rails core team members say that Rails can not include all inflections and that exceptions should be defined by the user in the inflections initializer generated with every new Rails application. I agree, but that's not the practice I'm seeing here. Rails' inflections are riddled with poorly defined singularization and pluralization rules that are not even rules in the first place.</p>

<p>Some of the inflections I referred to above are defined as special cases even though they follow a regular pluralization rule. Many shouldn't be defined in the first place, even as irregularities instead of singularization/pluralization rules. When was the last time you saw an application using buffalo, tomato, mouse, louse, ox, or octopus as a model? The "Zombie" rule was only added because a website devoted to Rails tutorials, <a href="http://railsforzombies.org/">Rails for Zombies</a>, noticed that <a href="https://github.com/rails/rails/pull/2457">generators were singularizing "zombies" as "zomby"</a> due to "zombies" being irregular. Perhaps a better idea would have been to take that as an opportunity to provide a quick lesson on inflections to new Rails users.</p>

<p>Oh, and don't even get me started on the ridiculously added, archaic plural form of "cow": <code>inflect.irregular('cow', 'kine')</code></p>

<p>Of course, there are some exceptions and irregularities that make sense to define. To name a few, "child" is a frequently-used term in programming and computer science, "person" is a somewhat frequently-used model name in Rails applications, and "half" or "life" are also used frequently in programming depending on the area. I won't argue that they should be defined within the framework as irregularities.</p>

<h2>Rails 4.0 is coming - it's time to .unfreeze inflections</h2>

<p>With Rails 4.0 on its way, isn't now a good time to clean up the inflections? Isn't a major release the perfect time to eschew the worry of breaking existing applications for the betterment of the framework? Rails is a huge piece of software; any upgrades should be done with caution. Users should be expected to read the CHANGELOG when upgrading even from minor versions, and they should read the upgrade guides that Rails provides with each minor version bump. Inflections do not need to be backwards compatible. We should fix the inflections that are clearly exceptions and not rules, note it in the CHANGELOG and upgrade guides, and move on with our lives. Developers who blindly upgrade their Rails versions are asking for hurt, and freezing an area of the framework that needs improvement is the wrong approach.</p>

<h2>Until then, a better set of defaults:</h2>

<p>Until Rails core decides its time to clean up inflections, I've provided a more sane set of singularization and pluralization rules in the form of a gem:</p>

<p><a href="https://github.com/davidcelis/inflections">https://github.com/davidcelis/inflections</a></p>

<p>Here's the difference:</p>

<p>4 pluralization   rules (down from 21)</p>

<p>5 singularization rules (down from 27)</p>

<p>3 irregularities        (down from 7)</p>

<p>1 uncountable           (down from 10)</p>

<p>Ahhh. Much better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Collaborative Filtering With Likes and Dislikes]]></title>
    <link href="http://davidcelis.github.io/blog/2012/02/07/collaborative-filtering-with-likes-and-dislikes/"/>
    <updated>2012-02-07T13:10:00-08:00</updated>
    <id>http://davidcelis.github.io/blog/2012/02/07/collaborative-filtering-with-likes-and-dislikes</id>
    <content type="html"><![CDATA[<p>Ah, caught your attention, did I? Well, now that I have it, I'd like to sit down and have a chat. We need to talk, friend, and we <em>need</em> to talk about collaborative filtering. It's a technique used in recommendation engines. Please repeat the following:</p>

<p><blockquote><p>This is collaborative filtering. There are many different kinds of collaborative filtering, but mine is memory-based. Memory-based collaborative filtering is my best friend.</p><footer><strong>Gunnery Seargeant Hartman</strong> <cite>Full Metal Jacket</cite></footer></blockquote></p>

<p>Okay, so I may be taking some creative liberty with this one. You shouldn't be best friends with any one form of collaborative filtering. They all deserve love and they all have their uses. I'm sure the gunnery seargeant would agree with me! However, I <em>would</em> like to focus on memory-based collaborative filtering today as the algorithms that fall into this category are used often in recommender systems. Additionally, I'm going to go ahead and shift us into the context of a binary rating system: likes and dislikes. Okay? Okay!</p>

<!--more-->


<p>My good (but not best!) friend, memory-based collaborative filtering, uses submitted ratings to calculate a numeric similarity between users. Wait, what!? You mean that two people can be compared and that comparison can yield a number? You bet! We can <em>all</em> be reduced to numbers. It's a Brave New World, reader! These similarity values can then be used to predict how a user will feel about items they have not yet rated. The top predictions are given back to the user in the form of recommendations! It's like having your mind read. Except by a computer! And instead of reading your mind, it's doing math!</p>

<p>There are a good number of different algorithms used in memory-based collaborative filtering to calculate the similarity between users. A few of the more widely used algorithms or formulae include <a href="http://en.wikipedia.org/wiki/Euclidean_distance">Euclidean Distance</a>, <a href="http://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient">Pearson's Correlation</a>, <a href="http://en.wikipedia.org/wiki/Cosine_similarity">Cosine-based vector similarity</a>, and the <a href="http://en.wikipedia.org/wiki/K-nearest_neighbor_algorithm">k-Nearest Neighbor algorithm</a>. These are all well documented on the internets and multiple example implementations are available should you wish to know more. They're all great for the heavily-used five-star system, but that's so common! So boring! So passé! I want to talk about something <em>else</em>. I want to talk about an algorithm I don't see used often but would work great for my other friends, Like and Dislike. I want to talk about the Jaccard similarity coefficient!</p>

<h2>Jean-Luc Jaccard?</h2>

<p>No, no, no. I'm talking about Paul Jaccard, a botanist that performed research near the turn of the 20th century. Jaccard's research led him to develop the <em>coefficient de communauté</em>, or what is known in English as the Jaccard similarity coefficient (also called the Jaccard index). The Jaccard index is a simple calculation of similarity between sample sets. Where the aforementioned collaborative filtering algorithms can quickly become mathematically complex, the Jaccard index is rather simple! It can be described as the size of the intersection between two sample sets divided by the size of the union between the same sample sets. Look over there! It's math!</p>

<p><img src="http://latex.codecogs.com/png.latex?J(u_1,u_2)=\frac{\left%20|u_1%20\bigcap%20u_2\right%20|}{\left%20|u_1\bigcup%20u_2%20\right%20|}"></p>

<p>I bet those mushy brain-gears of yours are already slimily grinding away at how intuitive this formula can be when used with likes and dislikes!</p>

<p>Let's say we're comparing two users u<sub>1</sub> and u<sub>2</sub>. How does one intersect two users? How does one union them? Well, we don't want to intersect or union the people themselves. This isn't Mary Shelly's <em>Frankenstein</em>! If we're using the Jaccard index for collaborative filtering, we want both of these operations to deal with the users' ratings. Let's say that the intersection is the set of only the items that the two users have rated in common. This would make the union the combined set of items that each user has rated independently of the other. But how does this work with the actual ratings? Let's modify the formula a bit to deal with the likes and dislikes themselves:</p>

<p><img src="http://latex.codecogs.com/png.latex?J(u_1,u_2)=\frac{\left%20|L<em>{u1}%20\bigcap%20L</em>{u2}\right%20|+\left%20|D<em>{u1}%20\bigcap%20D</em>{u2}\right%20|}{\left%20|u_1\bigcup%20u_2%20\right%20|}"></p>

<p>Now we're getting somewhere! What we have now is looking more collaborative and filtery for sure. We find the number of items that both u<sub>1</sub> and u<sub>2</sub> like, add it to the number of items that both u<sub>1</sub> and u<sub>2</sub> dislike, and then divide that by the total number of different items that u<sub>1</sub> and u<sub>2</sub> have rated.</p>

<h2>Hey, wait! I like [INSERT THING HERE] and he doesn't!</h2>

<p>Well first of all, shame on him. [INSERT THING HERE] is gold, Jerry! Solid gold! But also, you raise an excellent point, sir and/or madam! Disagreements should, at the very least, matter just as much as agreements. Let's tweak the formula a bit more, shall we?</p>

<p><img src="http://latex.codecogs.com/png.latex?J(u_1,u_2)=\frac{\left%20|L<em>{u1}%20\bigcap%20L</em>{u2}\right%20|+\left%20|D<em>{u1}%20\bigcap%20D</em>{u2}\right%20|-\left%20|L<em>{u1}%20\bigcap%20D</em>{u2}\right%20|-\left%20|D<em>{u1}%20\bigcap%20L</em>{u2}\right%20|}{\left%20|u_1\bigcup%20u_2%20\right%20|}"></p>

<p>Whew! This looks a lot more complex than the original formula, but it's still quite simple! I promise! Now, in addition to finding the agreements between u<sub>1</sub> and u<sub>2</sub>, we're finding their disagreements! The agreements between u<sub>1</sub> and u<sub>2</sub> are the same as before. Their disagreements are conversely defined as the number of items that u<sub>1</sub> likes but u<sub>2</sub> dislikes and vice versa. All we do is subtract the number of disagreements from the number of agreements, and divide by the total number of items liked or disliked across the two users. Easy!</p>

<p>It is worth noting that the similiarity value calculated has a bounds of -1 and 1. You would have a -1.0 similarity value with your polar opposite (your evil twin that has rated the same items as you, but differently) and a 1.0 similarity value with your clone (you have both rated the same items in the same ways).</p>

<h2>Okay, read my mind!</h2>

<p>Now that we can reduce the relationship between two people to a number, lets use that number to predict whether you'll like or dislike something. Neat! Let's say we want to predict how you'll feel about <em>thing</em>. We get every user in our system that has rated <em>thing</em> and start calculating a hive-mind sum. Feel free to fear the hive-mind sum, as the hive-mind sum demands your respect! If a user liked <em>thing</em>, we add your similarity value with them to the hive-mind sum. If they disliked it, we subtract instead! The idea behind this is that if someone with tastes similar to yours likes <em>thing</em>, you'll probably like it too. If they dislike it, you're less likely to enjoy <em>thing</em>. But if a user with tastes dissimilar to yours likes <em>thing</em>, you're LESS likely to hit that "Like" button and vice versa. Moving right along, we finally take this hive-mind sum and divide it by the total number of people that have rated <em>thing</em>. Done! Woah, what? That was easy! Look, more math!</p>

<p><img src="http://latex.codecogs.com/png.latex?P(you,%20thing)=\frac{\sum_{i=1}<sup>{n_L}%20J(you,%20u_i)%20-%20\sum_{i=1}<sup>{n_D}J(you,%20u_i)}{n_L%20+%20n_D}</sup></sup>"></p>

<p>In this equation: <em>thing</em> is the thing we want to know if <em>you</em> will like, <em>n<sub>L</sub></em> is the number of users that have liked <em>thing</em>, and <em>n<sub>D</sub></em> is the number of users that have disliked <em>thing</em>. Good? Good!</p>

<h2>Just show me the code!</h2>

<p>Well, aren't we impatient? Fine. I suppose you've waited this long. Here's a simple pseudo-implementation of some sweet, sweet Jaccardian collaborative filtering. In Ruby, of course!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">similarity_with</span><span class="p">(</span><span class="n">user</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# Array#&amp;amp; is the set intersection operator.</span>
</span><span class='line'><span class="sr">agreements = (self.likes &amp;amp; user.likes).size</span>
</span><span class='line'><span class="sr">agreements += (self.dislikes &amp;amp; user.dislikes).size</span>
</span><span class='line'>
</span><span class='line'><span class="sr">disagreements = (self.likes &amp;amp; user.dislikes).size</span>
</span><span class='line'><span class="sr">disagreements += (self.dislikes &amp;amp; user.likes).size</span>
</span><span class='line'>
</span><span class='line'><span class="sr"># Array#| is the set union operator</span>
</span><span class='line'><span class="sr">total = (self.likes + self.dislikes) | (user.likes + user.dislikes)</span>
</span><span class='line'>
</span><span class='line'><span class="sr">return (agreements - disagreements) /</span> <span class="n">total</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">to_f</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def prediction_for(item)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">hive_mind_sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="n">rated_by</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="n">liked_by</span><span class="o">.</span><span class="n">size</span> <span class="o">+</span> <span class="n">item</span><span class="o">.</span><span class="n">disliked_by</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>
</span><span class='line'><span class="n">item</span><span class="o">.</span><span class="n">liked_by</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">u</span><span class="o">|</span> <span class="n">hive_mind_sum</span> <span class="o">+=</span> <span class="nb">self</span><span class="o">.</span><span class="n">similarity_with</span><span class="p">(</span><span class="n">u</span><span class="p">)}</span>
</span><span class='line'><span class="n">item</span><span class="o">.</span><span class="n">disliked_by</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">u</span><span class="o">|</span> <span class="n">hive_mind_sum</span> <span class="o">-=</span> <span class="nb">self</span><span class="o">.</span><span class="n">similarity_with</span><span class="p">(</span><span class="n">u</span><span class="p">)}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">hive_mind_sum</span> <span class="o">/</span> <span class="n">rated_by</span><span class="o">.</span><span class="n">to_f</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is nice and simple and is more or less the way I do things in <a href="http://github.com/davidcelis/recommendable">recommendable</a> and <a href="http://goodbre.ws/">goodbre.ws</a>. I did, however, tweak the algorithm in one major way. For example, in that last stage of calculating the similarity values, I actually divide by <code>self.likes.size + self.dislikes.size</code>. With this change, the similarity value becomes dependent on the number of items that <code>self</code> has rated, but not the number of items that <code>user</code> has rated. As such, this makes their similarity values not be reflective:</p>

<p>```ruby
self.similarity_with(user) == user.similarity_with(self)</p>

<h1>=> false unless self.ratings.size == user.ratings.size</h1>

<p>```</p>

<p>My reasoning behind this is that newer users who have not had a chance to submit likes and dislikes for many objects should not be punished for simply being new. Recommendations for new users can really suck! Say I've submitted ratings for five items, you've submitted ratings for fifty, and four of these items are the same. If we share the same ratings for three of those items, I want my similarity value for you to be high. I'm new here! It will potentially help me get better recommendations faster. You, on the other hand... You've seen things, man. You don't need handouts from the system. Your similarity value with me should be much lower.</p>

<h2>The Conclusioning</h2>

<p>Clearly, the Jaccardian similarity coefficient is a very intuitive way to compare people when the rating system is binary. The other algorithms I mentioned are pretty cool too, but Likes/Dislikes and set math were just made for each other. They're like peanut butter and jelly. Bananas and Nutella. Charlie Sheen and cocaine. It's a beautiful marriage that I hope will last forever, even if I wasn't invited to the wedding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recommendable]]></title>
    <link href="http://davidcelis.github.io/blog/2012/01/28/recommendable/"/>
    <updated>2012-01-28T17:39:00-08:00</updated>
    <id>http://davidcelis.github.io/blog/2012/01/28/recommendable</id>
    <content type="html"><![CDATA[<p>A small side-project that I've had conceptualized for several months has
finally come to fruition! I'm speaking of Recommenable, a Rails Engine that I
have been hard at work on for the past couple of days. Some of you may be
familiar with a website I run called <a href="http://goodbre.ws/">Goodbre.ws</a>. Goodbre.ws is a
recommendation engine for beer that operates using Likes and Dislikes rather
than the more traditional ★★★★★ rating system. If you're curious as to why I
chose likes and dislikes, I'm planning a post soon that goes more into depth
on this. Since I wrote Goodbre.ws, I've wanted to strip the logic for the
recommendation engine itself out and make it available as an
easily-includeable plugin for others. Late last night, I did just that, and the
first working version is available for all to use. So, I would like to present
you with...</p>

<h2>Recommendable</h2>

<p>Recommendable is an engine that, when installed, will insert a
recommendation engine into your existing Ruby on Rails application. This
will give a specified User class the immediate ability to being liking and
disliking other Models in your application. Once your users have liked or
disliked even a single thing, they'll start to receive personalized
recommendations!</p>

<!--more-->


<h2>Installation</h2>

<p><em>Note: Recommendable relies on Redis to run. The rest of this post assumes
that it's installed. It's easily installed on Mac OS X using homebrew</em> (<code>brew
install redis</code>).<em> Linux users can use</em> <code>apt-get</code> <em>or build from source.</em></p>

<p>To install Recommendable, simply add the following to your Rails application's
<code>Gemfile</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;recommendable&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then...</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle install
</span><span class='line'><span class="nv">$ </span>rails generate recommendable:install
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will do several things:</p>

<ol>
<li>Create Recommendable's initializer file (located at
<code>config/initializers/recommendable.rb</code>)</li>
<li>Copy migrations for Recommendable's Like, Dislike and Ignore models</li>
<li>Run those migrations for you</li>
</ol>


<p>After running the installation generator, you should check the initializer if
you need to do configuration for Redis.</p>

<p>Finally, Recommendable uses Resque to establish a queue that your users will
be placed in after liking or disliking an object. This is to prevent other
requests to your webserver from taking too long. Assuming your Redis server is
running, run the following command as many times as you wish:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ QUEUE</span><span class="o">=</span>recommendable rake environment resque:work
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Each time this command will run, a Resque worker will fire up and be ready for
action. Of course, each worker will use RAM separately, so take note of how
many are safe to use on your production server! This is a standard rake task
included in Resque so, for more options you can pass to it, check
<a href="http://github.com/defunkt/resque">defunkt/resque</a></p>

<h2>Usage</h2>

<p>In your Rails model that represents your application's user:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/models/user.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">recommends</span> <span class="ss">:movies</span><span class="p">,</span> <span class="ss">:shows</span><span class="p">,</span> <span class="ss">:other_things</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # ...</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And that's it! Your User instances are ready to like, dislike, and get recommendations! For more information on how to use Recommendable once you've
installed it and set up your user model, head over to
<a href="http://github.com/davidcelis/recommendable">davidcelis/recommendable</a> and check out the README.</p>
]]></content>
  </entry>
  
</feed>
