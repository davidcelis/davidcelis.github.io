<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: goodbrews | davidcel.is]]></title>
  <link href="http://davidcelis.github.io/blog/categories/goodbrews/atom.xml" rel="self"/>
  <link href="http://davidcelis.github.io/"/>
  <updated>2013-05-24T08:28:07-07:00</updated>
  <id>http://davidcelis.github.io/</id>
  <author>
    <name><![CDATA[David Celis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deploying Discourse with Capistrano]]></title>
    <link href="http://davidcelis.github.io/blog/2013/05/02/deploying-discourse-with-capistrano/"/>
    <updated>2013-05-02T10:42:00-07:00</updated>
    <id>http://davidcelis.github.io/blog/2013/05/02/deploying-discourse-with-capistrano</id>
    <content type="html"><![CDATA[<p>With the recent release of <a href="http://www.discourse.org/">Discourse</a>, an excellent piece of forum software by <a href="http://codinghorror.com/">Jeff Atwood</a>, <a href="http://eviltrout.com/">Robin Ward</a> and <a href="http://samsaffron.com/">Sam Saffron</a>, I was eager to get an installation up and running myself. With a simple layout it seemed like just what I needed as <a href="https://forums.goodbre.ws/">support and discussion forums for goodbre.ws</a>. Discourse is still considered to be squarely in the beta phase, so I had a hard time finding any guides or tutorials that fit my needs for deploying Discourse to a VPS. I did find a <a href="https://github.com/baus/install-discourse">nice tutorial</a> by Christopher Baus, but I wanted to get a setup using Capistrano rather than <code>init.d</code> because that feels much more Railsy to me. Read on for how I got a Digital Ocean droplet running Discourse on thin with zero-downtime deployments.</p>

<!--more-->


<h2>Set up your VPS</h2>

<p><em>If you're a Chef wiz and already have some recipes for Discourse, you can skip ahead to the section on setting up Discourse. Chef is still on my learning TODO list, so I provisioned a server from scratch.</em></p>

<p>I started with a <a href="http://www.digitalocean.com/">Digital Ocean</a> droplet running the latest release of Ubuntu 13.04, but presumably any VPS running a recent release (12.04 or 12.10) of Ubuntu should do. Make sure your server has at least 1GB of RAM; you'll need it to compile all of Discourse's assets. I chose the 1GB / 1CPU plan, and it's served me well thus far.</p>

<h3>Secure your server</h3>

<p><a href="http://www.linode.com/">Linode</a> already has an <a href="http://library.linode.com/securing-your-server">excellent guide</a> on hiding your server from prying eyes, so I suggest following it to the T. I don't want to reinvent the wheel here, so this is what I followed exactly. I set my username to <code>goodbrews</code> for deploying anything related to that site.</p>

<h3>Change your server's hostname</h3>

<p>Depending on what characters you included in your droplet's name, DigitalOcean may not set the hostname correctly. To change my server's hostname, I did the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>forums.goodbre.ws | sudo tee /etc/hostname
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Because I deployed my installation to <code>forums.goodbre.ws</code>, I changed the first line of my <code>/etc/hosts/</code> file to:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>127.0.0.1 localhost forums.goodbre.ws</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<br/>


<h3>Create a swapfile</h3>

<p>If you're running on a VPS service that automatically provisions a swap (such as Linode), you can skip this. On Digital Ocean, however, you'll need to do this yourself. 1GB of RAM was enough for my first deployment but, when I tried to run a second, I wasn't able to allocate enough memory to compile assets. Creating a swap, however, has fixed this issue for me. Let's create a 512MB swapfile:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>/swapfile <span class="nv">bs</span><span class="o">=</span>1024 <span class="nv">count</span><span class="o">=</span>512k
</span><span class='line'>sudo mkswap /swapfile
</span><span class='line'>sudo swapon /swapfile
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then, you'll need to edit <code>/etc/fstab</code> and paste in the following line:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/swapfile       none    swap    sw      0       0</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finally, prevent your swapfile from being readable:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chown root:root /swapfile
</span><span class='line'>sudo chmod 0600 /swapfile
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<br />


<h3>Install Ruby 2.0.0-p195 and bundler</h3>

<p>SSH into your VPS as your deployment user and install the necessary dependencies to build Ruby on Ubuntu:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install build-essential openssl libreadline6 libreadline6-dev <span class="se">\&lt;</span>/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;         curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev <span class="se">\</span>
</span><span class='line'>         sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev libgdbm-dev <span class="se">\</span>
</span><span class='line'>         ncurses-dev automake libtool bison subversion pkg-config libffi-dev
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, I personally enjoy using rbenv and ruby-build, so this tutorial will follow installation prodecures around those tools. Feel free to use RVM, chruby, or some other Ruby version manager if you wish.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Install rbenv&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git clone git://github.com/sstephenson/rbenv.git ~/.rbenv&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Setup rbenv initialization&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;echo <span class="s1">&#39;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#39;</span> &gt;&gt; ~/.bash_profile
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(rbenv init -)&quot;&#39;</span> &gt;&gt; ~/.bash_profile&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Restart your shell to use rbenv&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;exec <span class="nv">$SHELL</span> -l&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Install ruby-build&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Install Ruby 2.0.0-p195 and <span class="nb">set </span>it as your user<span class="err">&#39;</span>s default&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;rbenv install 2.0.0-p195; rbenv global 2.0.0-p195
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>NOTE: the installation guide for <code>rbenv</code> mentions using <code>~/.profile</code> instead of <code>~/.bash_profile</code>, but I found the latter to work for me. You can try either if you have issues.</em></p>

<p>Finally, you'll need bundler.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install bundler --no-rdoc --no-ri
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<br/>


<h3>Install nginx</h3>

<p>I prefer to run my Rails apps under nginx. Plus, Discourse comes with a sample configuration file that requires little tweaking. No brainer!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install nginx
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<br/>


<h3>Install PostgreSQL, Redis, and other required libraries</h3>

<p>Discourse requires <a href="http://www.postgresql.org">PostgreSQL</a> and <a href="http://redis.io/">Redis</a> to run, so let's install those as well:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install postgresql-9.1 postgresql-contrib-9.1 redis-server <span class="se">\&lt;</span>/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                 libxml2-dev libxslt-dev libpq-dev make g++
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note that postgresql-contrib-9.1 will install the hstore extension for PostgreSQL, which Discourse requires. You'll need to create a postgres role and Discourse's production database:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Create your postgres role <span class="o">(</span>I named mine goodbrews, go figure<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;sudo -u postgres createuser goodbrews -s -P&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Create discourse<span class="err">&#39;</span>s production database <span class="o">(</span>I named mine discourse_production<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;createdb -U goodbrews discourse_production
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And now your VPS should be set up and ready to run Discourse! That means it's time to...</p>

<h2>Set up Discourse</h2>

<p>Because you'll need to configure it yourself, Discourse is a prime candidate for <a href="https://github.com/discourse/discourse/fork">forking</a>. If you don't have Ruby installed on your own computer, yet, I recommend installing rbenv locally. The same steps above will work (or follow rbenv's <a href="https://github.com/sstephenson/rbenv">installation guide</a>), so make sure you have Ruby 2.0.0-p195 installed.</p>

<p>Then, clone your fork locally (on your own computer).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:&lt;your_github_username&gt;/discourse.git
</span><span class='line'><span class="nb">cd </span>discourse
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<br/>


<h3>Edit the Discourse configuration files</h3>

<p>Copy the sample configuration files...</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cp config/database.yml.sample config/database.yml
</span><span class='line'>cp config/nginx.sample.conf config/nginx.conf
</span><span class='line'>cp config/redis.yml.sample config/redis.yml
</span><span class='line'>cp config/environments/production.sample.rb config/environments/production.rb
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>... and edit them with your own information. <code>database.yml</code> should, of course, be edited to use the postgres role that you configured earlier (I also changed the name of the production database to <code>discourse_production</code> as I mentioned earlier).</p>

<p><code>redis.yml</code> is unlikely to change if you've followed this guide and are running it on the same server.</p>

<p><code>production.rb</code> is where you'll want to configure how your Discourse installation's email gets sent out. Personally, I use <a href="http://mandrillapp.com/">Mandrill</a> and configured my app to hit their API.</p>

<p><code>nginx.conf</code> is trickier depending on your needs, however. For instance, I set my discourse installation up to use HTTPS and provisioned SSL certificates from <a href="https://startssl.com/">StartSSL</a>. For the purposes of this guide, we'll stick with basic HTTP. I prefer deploying my applications into the home directory of my deployment user to ensure proper ownership, so my <code>nginx.conf</code> file ended up looking like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config/nginx.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">upstream</span> <span class="s">discourse</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">server</span> <span class="s">unix:///home/goodbrews/discourse/shared/sockets/thin.0.sock</span> <span class="s">max_fails=1</span> <span class="s">fail_timeout=15s</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">server</span> <span class="s">unix:///home/goodbrews/discourse/shared/sockets/thin.1.sock</span> <span class="s">max_fails=1</span> <span class="s">fail_timeout=15s</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">server</span> <span class="s">unix:///home/goodbrews/discourse/shared/sockets/thin.2.sock</span> <span class="s">max_fails=1</span> <span class="s">fail_timeout=15s</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">server</span> <span class="s">unix:///home/goodbrews/discourse/shared/sockets/thin.3.sock</span> <span class="s">max_fails=1</span> <span class="s">fail_timeout=15s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;server</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">gzip</span> <span class="no">on</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">gzip_min_length</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">gzip_types</span> <span class="s">application/json</span> <span class="s">text/css</span> <span class="s">application/x-javascript</span><span class="p">;</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;</span>  <span class="s">server_name</span> <span class="s">forums.goodbre.ws</span><span class="p">;</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;</span>  <span class="s">sendfile</span> <span class="no">on</span><span class="p">;</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;</span>  <span class="s">keepalive_timeout</span> <span class="mi">65</span><span class="p">;</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;</span>  <span class="s">location</span> <span class="s">/</span> <span class="p">{</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;root</span> <span class="s">/home/goodbrews/discourse/current/public</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">location</span> <span class="p">~</span> <span class="sr">^/t\/[0-9]+\/[0-9]+\/avatar</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">expires</span> <span class="s">1d</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">add_header</span> <span class="s">Cache-Control</span> <span class="s">public</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">add_header</span> <span class="s">ETag</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">location</span> <span class="p">~</span> <span class="sr">^/assets/</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">expires</span> <span class="s">1y</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">add_header</span> <span class="s">Cache-Control</span> <span class="s">public</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">add_header</span> <span class="s">ETag</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">proxy_set_header</span>  <span class="s">X-Real-IP</span>  <span class="nv">$remote_addr</span><span class="p">;</span>
</span><span class='line'><span class="kn">proxy_set_header</span>  <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'><span class="kn">proxy_set_header</span>  <span class="s">X-Forwarded-Proto</span> <span class="nv">$scheme</span><span class="p">;</span>
</span><span class='line'><span class="kn">proxy_set_header</span>  <span class="s">Host</span> <span class="nv">$http_host</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># If the file exists as a static file serve it directly without</span>
</span><span class='line'><span class="c1"># running all the other rewite tests on it</span>
</span><span class='line'><span class="kn">if</span> <span class="s">(-f</span> <span class="nv">$request_filename</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">if</span> <span class="s">(!-f</span> <span class="nv">$request_filename</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">proxy_pass</span> <span class="s">http://discourse</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kn">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;</span>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>max_fails=1 fail_timeout=15s</code> statements on the end of the upstream thin servers is what will help us achieve zero-downtime deployments. As we're phasing out old thin processes with new ones, any failures on an old thin process will cause nginx to cease handing it requests. It will, instead, hand the request to an old thin process that's either still running or one of the new thin processes that has already started.</p>

<h3>Configure thin</h3>

<p>You'll also want a thin configuration file to make your life easier:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>thin config -C config/thin.yml --servers 4 -e production/home/goodbrews/forums/current
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will generate a file, <code>config/thin.yml</code>, which you should then go edit. Make sure to set the <code>chdir</code>, <code>log</code>, <code>pid</code>, and <code>socket</code> keys to the correct paths. My thin configuration looks like this:</p>

<h2><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config/thin.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;chdir</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/home/goodbrews/discourse/current</span>
</span><span class='line'><span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">production</span>
</span><span class='line'><span class="l-Scalar-Plain">address</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.0.0.0</span>
</span><span class='line'><span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3000</span>
</span><span class='line'><span class="l-Scalar-Plain">timeout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">30</span>
</span><span class='line'><span class="l-Scalar-Plain">log</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/home/goodbrews/discourse/shared/log/thin.log</span>
</span><span class='line'><span class="l-Scalar-Plain">pid</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/home/goodbrews/discourse/shared/pids/thin.pid</span>
</span><span class='line'><span class="l-Scalar-Plain">socket</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/home/goodbrews/discourse/shared/sockets/thin.sock</span>
</span><span class='line'><span class="l-Scalar-Plain">max_conns</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1024</span>
</span><span class='line'><span class="l-Scalar-Plain">max_persistent_conns</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">100</span>
</span><span class='line'><span class="l-Scalar-Plain">require</span><span class="p-Indicator">:</span> <span class="p-Indicator">[]</span>
</span><span class='line'><span class="l-Scalar-Plain">wait</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">30</span>
</span><span class='line'><span class="l-Scalar-Plain">servers</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">4</span>
</span><span class='line'><span class="l-Scalar-Plain">daemonize</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'><span class="l-Scalar-Plain">onebyone</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<br/>


<p>Make sure you add the <code>onebyone: true</code> key. This is the secret sauce that will make your Thin servers restart... You guessed it... One by one. Zero downtime!</p>

<h3>Create a secret token</h3>

<p>Discourse doesn't ship with a secret token set, since it's not recommended to be version controlled. Therefore, you'll need to generate one and set it yourself:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>rake secret
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Open up <code>config/initializers/secret_token.rb</code> and paste the generated secret somewhere (probably line 10). You can delete the rest of the file.</p>

<h3>Set up Capistrano</h3>

<p>Add the following to Discourse's <code>Gemfile</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;capistrano&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;capistrano-rbenv&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Create a <code>Capfile</code> in Discourse's root directory:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Capfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">load</span> <span class="s1">&#39;deploy&#39;</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="ss">:namespace</span><span class="p">)</span>
</span><span class='line'><span class="nb">load</span> <span class="s1">&#39;deploy/assets&#39;</span>
</span><span class='line'><span class="no">Dir</span><span class="o">[</span><span class="s1">&#39;vendor/plugins/&lt;em&gt;/recipes/&lt;/em&gt;.rb&#39;</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">plugin</span><span class="o">|</span> <span class="nb">load</span><span class="p">(</span><span class="n">plugin</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="nb">load</span> <span class="s1">&#39;config/deploy&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Create your deployment recipe file at <code>config/deploy.rb</code>. Here's what mine looks like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config/deploy.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Require the necessary Capistrano recipes&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">require</span> <span class="s1">&#39;capistrano-rbenv&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler/capistrano&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;sidekiq/capistrano&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Repository settings, forked to an outside copy&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span> <span class="s1">&#39;git@github.com:goodbrews/forums.git&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_via</span><span class="p">,</span> <span class="ss">:remote_cache</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="n">fetch</span><span class="p">(</span><span class="ss">:branch</span><span class="p">,</span> <span class="s1">&#39;master&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span><span class='line'><span class="n">ssh_options</span><span class="o">[</span><span class="ss">:forward_agent</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;General Settings&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">set</span> <span class="ss">:deploy_type</span><span class="p">,</span> <span class="ss">:deploy</span>
</span><span class='line'><span class="n">default_run_options</span><span class="o">[</span><span class="ss">:pty</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Server Settings&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="s1">&#39;goodbrews&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:use_sudo</span><span class="p">,</span> <span class="kp">false</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rails_env</span><span class="p">,</span> <span class="ss">:production</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rbenv_ruby_version</span><span class="p">,</span> <span class="s1">&#39;2.0.0-p195&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;role :app, &#39;forums.goodbre.ws&#39;, primary: true</span>
</span><span class='line'><span class="sr">role :db,  &#39;forums.goodbre.ws&#39;, primary: true</span>
</span><span class='line'><span class="sr">role :web, &#39;forums.goodbre.ws&#39;, primary: true&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Application</span> <span class="no">Settings</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;set :application, &#39;discourse&#39;</span>
</span><span class='line'><span class="sr">set :deploy_to, &quot;/</span><span class="n">home</span><span class="o">/</span><span class="c1">#{user}/#{application}&quot;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># Tasks to start, stop and restart thin. This takes Discourse&#39;s</span>
</span><span class='line'>  <span class="c1"># recommendation of changing the RUBY_GC_MALLOC_LIMIT.</span>
</span><span class='line'>  <span class="n">desc</span> <span class="s1">&#39;Start thin servers&#39;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:start</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:no_release</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;run &quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="sr"> &amp;amp;&amp;amp; RUBY_GC_MALLOC_LIMIT=90000000 bundle exec thin -C config/</span><span class="n">thin</span><span class="o">.</span><span class="n">yml</span> <span class="n">start</span><span class="s2">&quot;, :pty =&amp;gt; false</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  desc &#39;Stop thin servers&#39;</span>
</span><span class='line'><span class="s2">  task :stop, :roles =&gt; :app, :except =&gt; { :no_release =&gt; true } do&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;run &quot;</span><span class="n">cd</span> <span class="c1">#{current_path} &amp;amp;&amp;amp; bundle exec thin -C config/thin.yml stop&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  desc &#39;Restart thin servers&#39;</span>
</span><span class='line'><span class="sr">  task :restart, :roles =&gt; :app, :except =&gt; { :no_release =&gt; true } do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2"> &amp;amp;&amp;amp; RUBY_GC_MALLOC_LIMIT=90000000 bundle exec thin -C config/thin.yml restart&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # Sets up several shared directories for configuration and thin&#39;s sockets,</span>
</span><span class='line'><span class="sr">  # as well as uploading your sensitive configuration files to the serer.</span>
</span><span class='line'><span class="sr">  # The uploaded files are ones I&#39;ve removed from version control since my</span>
</span><span class='line'><span class="sr">  # project is public. This task also symlinks the nginx configuration so, if</span>
</span><span class='line'><span class="sr">  # you change that, re-run this task.</span>
</span><span class='line'><span class="sr">  task :setup_config, roles: :app do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">run</span>  <span class="s2">&quot;mkdir -p </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/initializers&quot;</span>
</span><span class='line'><span class="n">run</span>  <span class="s2">&quot;mkdir -p </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/environments&quot;</span>
</span><span class='line'><span class="n">run</span>  <span class="s2">&quot;mkdir -p </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/sockets&quot;</span>
</span><span class='line'><span class="n">put</span>  <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;config/database.yml&quot;</span><span class="p">),</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/database.yml&quot;</span>
</span><span class='line'><span class="n">put</span>  <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;config/redis.yml&quot;</span><span class="p">),</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/redis.yml&quot;</span>
</span><span class='line'><span class="n">put</span>  <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;config/environments/production.rb&quot;</span><span class="p">),</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/environments/production.rb&quot;</span>
</span><span class='line'><span class="n">put</span>  <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;config/initializers/secret_token.rb&quot;</span><span class="p">),</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/initializers/secret_token.rb&quot;</span>
</span><span class='line'><span class="n">sudo</span> <span class="s2">&quot;ln -nfs </span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2">/config/nginx.conf /etc/nginx/sites-enabled/</span><span class="si">#{</span><span class="n">application</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Now edit the config files in </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # Symlinks all of your uploaded configuration files to where they should be.</span>
</span><span class='line'><span class="sr">  task :symlink_config, roles: :app do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">run</span>  <span class="s2">&quot;ln -nfs </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/database.yml </span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2">/config/database.yml&quot;</span>
</span><span class='line'><span class="n">run</span>  <span class="s2">&quot;ln -nfs </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/newrelic.yml </span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2">/config/newrelic.yml&quot;</span>
</span><span class='line'><span class="n">run</span>  <span class="s2">&quot;ln -nfs </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/redis.yml </span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2">/config/redis.yml&quot;</span>
</span><span class='line'><span class="n">run</span>  <span class="s2">&quot;ln -nfs </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/environments/production.rb </span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2">/config/environments/production.rb&quot;</span>
</span><span class='line'><span class="n">run</span>  <span class="s2">&quot;ln -nfs </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/initializers/secret_token.rb </span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2">/config/initializers/secret_token.rb&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;after &quot;deploy:setup&quot;, &quot;deploy:setup_config&quot;</span>
</span><span class='line'><span class="sr">after &quot;deploy:finalize_update&quot;, &quot;deploy:symlink_config&quot;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Tasks</span> <span class="n">to</span> <span class="n">start</span><span class="o">/</span><span class="n">stop</span><span class="o">/</span><span class="n">restart</span> <span class="n">the</span> <span class="n">clockwork</span> <span class="n">process</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;namespace :clockwork do</span>
</span><span class='line'><span class="sr">  desc &quot;Start clockwork&quot;</span>
</span><span class='line'><span class="sr">  task :start, :roles =&gt; [:app] do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2"> &amp;amp;&amp;amp; RAILS_ENV=</span><span class="si">#{</span><span class="n">rails_env</span><span class="si">}</span><span class="s2"> bundle exec clockworkd -c </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/config/clock.rb --pid-dir </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/pids --log --log-dir </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/log start&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  task :stop, :roles =&gt; [:app] do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2"> &amp;amp;&amp;amp; RAILS_ENV=</span><span class="si">#{</span><span class="n">rails_env</span><span class="si">}</span><span class="s2"> bundle exec clockworkd -c </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/config/clock.rb --pid-dir </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/pids --log --log-dir </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/log stop&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  task :restart, :roles =&gt; [:app] do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2"> &amp;amp;&amp;amp; RAILS_ENV=</span><span class="si">#{</span><span class="n">rails_env</span><span class="si">}</span><span class="s2"> bundle exec clockworkd -c </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/config/clock.rb --pid-dir </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/pids --log --log-dir </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/log restart&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;after  &quot;deploy:stop&quot;,    &quot;clockwork:stop&quot;</span>
</span><span class='line'><span class="sr">after  &quot;deploy:start&quot;,   &quot;clockwork:start&quot;</span>
</span><span class='line'><span class="sr">before &quot;deploy:restart&quot;, &quot;clockwork:restart&quot;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">namespace</span> <span class="ss">:db</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">desc</span> <span class="s1">&#39;Seed your database for the first time&#39;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:seed</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;run &quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="sr"> &amp;amp;&amp;amp; psql -d discourse_production &amp;lt; pg_dumps/</span><span class="n">production</span><span class="o">-</span><span class="n">image</span><span class="o">.</span><span class="n">sql</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end</span>
</span><span class='line'><span class="s2">end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;after  &#39;deploy:update_code&#39;, &#39;deploy:migrate&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>These should be all of the necessary Capistrano recipes you need to run your first deployment. Let's do that now!</p>

<h2>Deploy Discourse</h2>

<p>Okay, you've got your server set up and Discourse configured... Let's do this!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Set up the server<span class="err">&#39;</span>s directory structure <span class="k">for </span>Capistrano&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;cap deploy:setup&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Seed the database you created earlier&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;cap db:seed&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Do the first deploy! No server is running yet, so <span class="k">do </span>a cold deployment&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;cap deploy:cold
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Configure Discourse</h2>

<p>Congratulations! You should now have Discourse running on your VPS. Now that your forums are up and running, you'll want to follow the <a href="https://github.com/discourse/discourse/wiki/The-Discourse-Admin-Quick-Start-Guide">Quick Start Guide</a> that the Discourse team has written up.</p>

<h2>Keeping Discourse up-to-date</h2>

<p>You'll, of course, want to keep your copy of Discourse up-to-date with the main repository. To do so, <code>cd</code> into your local copy and set up an upstream remote:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote add upstream git@github.com:discourse/discourse.git
</span><span class='line'>git fetch upstream
</span><span class='line'>git merge upstream/master
</span><span class='line'>git push origin master
</span><span class='line'>cap deploy
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And there you go. Whenever you want to update, just fetch upstream, merge it into master, push, and redeploy.</p>

<h3>Anything here wrong?</h3>

<p>Please let me know if the above steps didn't work for you. It's possible that I accidentally left a step out of my process or that the process has changed and I don't know about it. Reply to <a href="http://meta.discourse.org/t/deploy-discourse-to-an-ubuntu-vps-using-capistrano/6353">my thread on meta.discourse.org</a> where I've posted this guide, or shoot me an email using the link below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From 1.5 GB to 50 MB: The Story of my Redis Database]]></title>
    <link href="http://davidcelis.github.io/blog/2013/03/20/the-story-of-my-redis-database/"/>
    <updated>2013-03-20T11:42:00-07:00</updated>
    <id>http://davidcelis.github.io/blog/2013/03/20/the-story-of-my-redis-database</id>
    <content type="html"><![CDATA[<p>It's been a while since I updated anybody on the current state of goodbre.ws. To make a long story short, I am in the midst of rewriting the site entirely. There are (or were) mainly two large problems for me. One big, niggling problem is that managing the database of beers on my own is impossible. My solution to this is to delegate that out to <a href="http://www.brewerydb.com/">BreweryDB</a>. They have so much more information on their beers than I do that it actually warrants a large rewrite of goodbre.ws. People have consistently asked for a more browsing-oriented experience as opposed to the current search-oriented experience. I'm going to deliver on that. The other big problem was how much memory my Redis instance was taking. Well, I have a small story about that. Yesterday, I reduced that memory usage from 1.5 GB to just 50 MB.</p>

<!--more-->


<p>Last year, with the press on goodbre.ws came a small horde of new users. I found myself with a userbase of about 7000 people. Quite a change from humble beginnings of only a couple hundred friends, classmates and colleagues. However, with all of these new people came a few problems. First, my background jobs to refresh recommendations slowed waaay down. I eventually discovered an I/O bottleneck in the background worker that was hitting both Postgres and Redis more than it reasonably should have been. However, as more and more people were getting their recommendations, I saw my server's RAM usage
quickly get worse and worse. It wasn't long before the amount of RAM that Redis was trying to use had exceeded the amount of RAM on my server (1 GB). I was forced to take goobre.ws down, and here we are.</p>

<p>I started doing a lot of thinking about my Redis usage. What could possibly be causing it to use that much memory? I considered the length of my keys. Typical redis keys looked something like <code>recommendable:users:1234:liked_beers</code>. Okay. Multiply that by five for each user (for dislikes, bookmarks, hidden beers, etc.) and there's a lot of repetition in the key names. They're also quite long. Maybe Redis was eating memory by storing tens of thousands of really long key names in RAM? I decided to try shortening them to a more reasonable format: <code>u:1234:lb</code> for example.</p>

<p>With lots of hope, I renamed my keys and restarted Redis. Hopes dashed: that reduced memory usage by a paltry 0.01 GB. That's 10 MB which, for RAM, may be worth exploring again in the future. However, it obviously wasn't my main problem.</p>

<p>Optimization is a rabbithole I've not had to go down very often. I am hardly an expert. I let my own self-consiousness and self-doubt  get in the way of doing real testing. I immediately jumped to conclusions that, perhaps, Redis was not the tool I wanted to be using. Maybe I should revert to storing ratings in PostgreSQL and accept what would certainly be a large performance hit during recommendation generation.</p>

<p>I toyed with the idea of finding some other data store. I couldn't find a key-value store that, like Redis, had sets and sorted sets but, unlike redis, was not in-memory. I also didn't want to give up the in-memory bit. It's just so fast. The SET and ZSET data structures were also far too perfect for my usage. But what could I do? Redis obviously was becoming too expensive for me. I would have to find something else.</p>

<p>I thought about moving my ratings into a Neo4j graph database. It could make for an interesting way of generating recommendations: it could be a simple graph traversal out from a user to connected (similar) users to find beers that those users like frequently. That would probably even be faster. However, the recommendations themselves would not be as good.</p>

<p>I also thought about simply moving the ratings back into Postgres and initializing some sort of Ruby Set mapping when the Rails app booted up, but that would probably take just as much memory if not more. I'd only be moving RAM usage from Redis to Rails.</p>

<p>Finally, yesterday, I did what I should have done in the first place. I downloaded a <a href="https://github.com/sripathikrishnan/redis-rdb-tools">memory profiling tool</a> built for Redis that would give me key-by-key memory usage stats. What I discovered was surprising, because it outlined a problem I remember thinking about a long time ago. So long ago, in fact, that I thought I had already addressed it.</p>

<p>My issue was how much data I was retaining in each sorted set (ZSET). Each user gets two ZSETs. One is used to store user similarities, and pairs other users' IDs with a calculated similarity value as the rank. The other ZSET stores recommendations, pairing beer IDs with the probability of them liking that beer. In each ZSET, I was keeping those values for every other user and for every other beer. Multiply that by what became a database of 7000 users and 60000 beers and, well, you can guess. Let's just say that a lot of these sets were over 1 MB each.</p>

<p>I thought I was already truncating the ZSETs filled with similarity values by using a k-Nearest-Neighbor setting that I had introduced to Recommendable. That setting uses some specified number of similar users when generating recommendations as opposed to every user. Enabling that setting reduced the size of each similarity set from around 7000 values to 200 (100 similar users and 100 dissimilar users).</p>

<p>Additionally, I implemented a setting to specify how many recommendations should be kept at any one time for each user. I only ever show 10 recommendations, so maintaining those probabilities for every single beer was ridiculous. I reduced that to 100 as well so people can immediately get more recommendations if they rate their current ones.</p>

<p>After truncating all of the sets to their specified lengths, I watched in awe as the memory Redis had been consuming dropped from 1.5 GB to 50 MB. I don't think I'll be having memory usage issues with Redis for a long time.</p>

<p>If you're a <a href="https://github.com/davidcelis/recommendable">Recommendable</a> user, I highly suggest you make use of the <code>nearest_neighbors</code>, <code>furthest_neighbors</code>, and <code>recommendations_to_store</code> settings.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The State of Recommendations in goodbre.ws]]></title>
    <link href="http://davidcelis.github.io/blog/2012/10/03/the-state-of-recommendations-in-goodbrews/"/>
    <updated>2012-10-03T11:27:00-07:00</updated>
    <id>http://davidcelis.github.io/blog/2012/10/03/the-state-of-recommendations-in-goodbrews</id>
    <content type="html"><![CDATA[<p><em>NOTE: This post has been updated. Please click through to read that.</em></p>

<p>Hello, friends and new faces. I want to take a moment to address a question that many of you have had on your mind since you came to <a href="https://goodbre.ws/">goodbre.ws</a>.</p>

<p><blockquote><p>Where are my recommendations?</p><footer><strong>Pretty Much Everybody</strong> <cite></cite></footer></blockquote></p>

<!--more-->


<p>There is (obviously) a problem with how long it is taking for your recommendations to be delivered, and I want to respond to that. I never expected goodbre.ws to be gaining popularity at its current speed. It's all beyond what I had hoped for and is very exciting. You likely found goodbre.ws on <a href="http://lifehacker.com/5947790/goodbrews-tracks-the-beer-you-like-suggests-brews-youd-love">Lifehacker</a> or <a href="http://www.huffingtonpost.com/2012/10/01/goodbrews-beer-recommendations-exploration-website_n_1930567.html?utm_hp_ref=technology">The Huffington Post</a>. I was surprised to discover goodbre.ws was suddenly getting press, and the spikes of traffic have made for a stressful (albeit exciting) few days.</p>

<p>Mainly, however, the heavy increase of traffic has shown me that my current way of serving recommendations isn't particularly scalable. As people join the site, recommendations become exponentially slower. But don't fret! I'm currently working on what will end up being a complete overhaul of <a href="https://github.com/davidcelis/recommendable">Recommendable</a>, the library that I wrote to power goodbre.ws. I'm hoping to have a solution out the door in the next week or two, and I think that it will alleviate this problem.</p>

<p>Until then, some newer users may not see any recommendations at all. I apologize for this. But I also appreciate patience during this period as I figure out what to do with goodbre.ws. Please keep in mind that I'm just one guy doing this on my free time and trying to provide what I think is a really simple and really cool service. Meanwhile, I think that goodbre.ws is still a great way to keep track of the beers you like and don't like. I've been getting great feedback and suggestions from so many people, so I hope that you'll continue to use the site during the next week or two with the understanding that recommendations <em>are</em> coming soon.</p>

<p>Thank you for being patient.</p>

<p><em>UPDATE (14:52 PST, 16 October 2012): Several days ago, I updated <a href="https://github.com/davidcelis/recommendable">recommendable</a> to be much speedier with Recommendations. If you're still not seeing recommendations, please rate one more beer. This will place you in a (now very small) queue, out of which 25 jobs can be processed in parallel. Once your turn comes, it takes about 10 minutes on average to get recommendations. Once you get them, you'll always have them. Any further ratings just improve accuracy. So just be patient for that initial process.</em></p>
]]></content>
  </entry>
  
</feed>
